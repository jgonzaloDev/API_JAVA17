package com.silmaur.shop.service.impl;

import com.silmaur.shop.dto.LiveSessionDTO;
import com.silmaur.shop.dto.LiveSessionRequestDTO;
import com.silmaur.shop.dto.LiveSessionSummaryDTO;
import com.silmaur.shop.exception.LiveSessionNotFoundException;
import com.silmaur.shop.handler.mapper.LiveSessionMapper;
import com.silmaur.shop.model.LiveSession;
import com.silmaur.shop.repository.CustomLiveSessionRepository;
import com.silmaur.shop.repository.LiveSessionRepository;
import com.silmaur.shop.service.LiveSessionService;
import java.time.LocalDateTime;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Slf4j
@Service
@RequiredArgsConstructor
public class LiveSessionServiceImpl implements LiveSessionService {

  private final LiveSessionRepository repository;
  private final CustomLiveSessionRepository customRepository;
  private final LiveSessionMapper mapper;

  /**
   * üìÑ Lista todas las sesiones en vivo existentes.
   */
  @Override
  public Flux<LiveSessionDTO> findAll() {
    log.debug("üóÇÔ∏è Listando todas las sesiones en vivo");
    return repository.findAll()
        .map(mapper::toSessionDto); // Usamos LiveSessionDTO directo (con status din√°mico)
  }

  /**
   * üÜï Crea una nueva sesi√≥n en vivo.
   */
  @Override
  public Mono<LiveSessionDTO> create(LiveSessionRequestDTO dto) {
    log.info("üì• Creando nueva sesi√≥n en vivo: {}", dto.getTitle());

    LiveSession entity = mapper.toEntity(dto);

    // Asignar fecha de creaci√≥n autom√°ticamente
    entity.setCreatedAt(LocalDateTime.now());

    // Validar que endTime > startTime
    if (entity.getEndTime() != null && entity.getStartTime() != null &&
        !entity.getEndTime().isAfter(entity.getStartTime())) {
      return Mono.error(new IllegalArgumentException("La hora de fin debe ser mayor que la de inicio"));
    }

    return repository.save(entity)
        .doOnSuccess(saved -> log.info("‚úÖ Sesi√≥n creada con ID {}", saved.getId()))
        .map(mapper::toSessionDto);
  }

  /**
   * üîç Busca una sesi√≥n en vivo por su ID.
   */
  @Override
  public Mono<LiveSessionDTO> findById(Long id) {
    log.debug("üîç Buscando sesi√≥n por ID: {}", id);
    return repository.findById(id)
        .map(mapper::toSessionDto);
  }

  /**
   * üóëÔ∏è Elimina una sesi√≥n en vivo por su ID.
   */
  @Override
  public Mono<Void> deleteById(Long id) {
    log.warn("‚ö†Ô∏è Eliminando sesi√≥n con ID {}", id);
    return repository.deleteById(id);
  }

  /**
   * üìä Obtiene un resumen completo de una sesi√≥n en vivo.
   */
  @Override
  public Mono<LiveSessionSummaryDTO> getSessionSummary(Long sessionId) {
    log.info("üîç Buscando resumen de la sesi√≥n con ID {}", sessionId);

    return repository.findById(sessionId)
        .switchIfEmpty(Mono.error(new LiveSessionNotFoundException(
            "Sesi√≥n no encontrada con ID: " + sessionId)))
        .flatMap(session ->
            customRepository.getSessionSummary(sessionId)
                .map(summary -> {
                  log.debug("üì¶ Datos brutos del resumen: {}", summary);
                  return mapper.toSummaryDto(summary, session.getTitle());
                })
        )
        .doOnSuccess(summary -> log.info("‚úÖ Resumen generado exitosamente para sesi√≥n {}", sessionId))
        .doOnError(error -> log.error("‚ùå Error al generar el resumen de la sesi√≥n {}", sessionId, error));
  }
}
